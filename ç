pub mod challenges_2 {
    use itertools::Itertools;
    use std::fs;
    pub const PATH: &'static str = "elf_strategies.txt";

    pub struct Play<'a> {
        oponent: &'a str,
        player: &'a str,
    }

    impl<'a> Play<'a> {
        fn from_file_contents(s: &'a str) -> Option<Self> {
            let play = s.split_whitespace().collect_tuple().map(|(op, pl)| Play {
                oponent: op,
                player: pl,
            });
            return play;
        }
    }

    fn parse_file() -> Vec<Play<'static>> {
        let contents = fs::read_to_string(PATH).expect("cant open file!");
        let values = contents
            .split("\n")
            .map(|val| {
                let aux = match Play::from_file_contents(val) {
                    Some(p) => p,
                    None => Play {
                        oponent: "H",
                        player: "H",
                    },
                };
                return aux;
            })
            .collect();

        return values;
    }

    pub fn first_challenge() {
        let plays = parse_file();
    }
}
